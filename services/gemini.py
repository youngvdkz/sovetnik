"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Gemini API.
"""

import logging
import google.generativeai as genai
from config import Config

logger = logging.getLogger(__name__)

class GeminiService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini API"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ Gemini"""
        genai.configure(api_key=Config.GEMINI_API_KEY)
        self.model = genai.GenerativeModel(Config.GEMINI_MODEL)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
        supports_audio = Config.supports_direct_audio_processing()
        
        logger.info(f"ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω Gemini —Å–µ—Ä–≤–∏—Å —Å –µ–¥–∏–Ω–æ–π –º–æ–¥–µ–ª—å—é: {Config.GEMINI_MODEL}")
        logger.info(f"üìã –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏:")
        logger.info(f"   ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–æ–º–ø—Ç–æ–≤")
        logger.info(f"   ‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∞—É–¥–∏–æ")
        logger.info(f"   ‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–æ–≤")
        logger.info(f"   ‚úÖ –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤")
        logger.info(f"   {'‚úÖ' if supports_audio else '‚ùå'} –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ")
        
        if supports_audio:
            logger.info(f"üéß –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –í–ö–õ–Æ–ß–ï–ù–ê - –≤–∞—à–∏ –ø—Ä–æ–º–ø—Ç—ã –ø–æ–ª—É—á–∞—Ç –¥–æ—Å—Ç—É–ø –∫ —ç–º–æ—Ü–∏—è–º –∏ –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏!")
        else:
            logger.info(f"üéß –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–π –º–æ–¥–µ–ª–∏")
            logger.info(f"üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: gemini-1.5-*, gemini-2.0-* –∏–ª–∏ gemini-2.5-*")
    
    async def process_with_context(self, text: str, context: str) -> tuple[str, str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é Gemini –≤ –¥–≤–∞ —ç—Ç–∞–ø–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            
        Returns:
            tuple: (–ø–æ–ª–Ω—ã–π_–æ—Ç–≤–µ—Ç, –∫—Ä–∞—Ç–∫–∏–π_–æ—Ç–≤–µ—Ç)
        """
        try:
            # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            full_prompt = f"""{Config.MAIN_PROMPT}

{context}–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {text}

–£—á–∏—Ç—ã–≤–∞–π –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ —ç—Ç–æ —Å—Å—ã–ª–∞–π—Å—è."""

            response1 = self.model.generate_content(full_prompt)
            full_answer = response1.text

            # –≠—Ç–∞–ø 2: –°–æ–∫—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
            summary_prompt = f"{Config.SUMMARY_PROMPT}\n\n–¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: {full_answer}"
            response2 = self.model.generate_content(summary_prompt)
            short_answer = response2.text

            return full_answer, short_answer

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Gemini: {e}")
            error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            return error_msg, error_msg
    
    async def transcribe_audio(self, audio_data: bytes) -> str:
        """
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Gemini –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∞—É–¥–∏–æ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
        
        Args:
            audio_data: –ë–∞–π—Ç—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            
        Returns:
            str: –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            import tempfile
            import os
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_path = temp_file.name
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –≤ Gemini
            audio_file = genai.upload_file(path=temp_path)
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            import time
            while audio_file.state.name == "PROCESSING":
                time.sleep(2)
                audio_file = genai.get_file(audio_file.name)
            
            if audio_file.state.name == "FAILED":
                logger.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ Gemini")
                return None
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
            response = self.model.generate_content([
                Config.AUDIO_TRANSCRIPTION_PROMPT,
                audio_file
            ])
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏ —Ñ–∞–π–ª –∏–∑ Gemini
            os.unlink(temp_path)
            genai.delete_file(audio_file.name)
            
            transcription = response.text.strip()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            logger.info(f"Gemini —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–ª–∏–Ω–∞: {len(transcription)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            return transcription if transcription else None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ —á–µ—Ä–µ–∑ Gemini: {e}")
            return None
    
    async def generate_dialog_summary(self, context: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ –≤—Å–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            context: –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
            
        Returns:
            str: –ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞
        """
        try:
            if not context.strip():
                return "–î–∏–∞–ª–æ–≥ –ø—É—Å—Ç - –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ."
            
            summary_prompt = f"""{Config.DIALOG_SUMMARY_PROMPT}

{context}

–°–æ–∑–¥–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–µ–∑—é–º–µ —ç—Ç–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞."""

            response = self.model.generate_content(summary_prompt)
            return response.text

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞: {e}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞."

    async def analyze_audio_quality(self, audio_data: bytes) -> dict:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞—É–¥–∏–æ –ø–µ—Ä–µ–¥ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π
        
        Args:
            audio_data: –ë–∞–π—Ç—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—á–µ—Å—Ç–≤–µ –∞—É–¥–∏–æ
        """
        try:
            import tempfile
            import os
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(suffix=".ogg", delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_path = temp_file.name
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –≤ Gemini
            audio_file = genai.upload_file(path=temp_path)
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            import time
            while audio_file.state.name == "PROCESSING":
                time.sleep(2)
                audio_file = genai.get_file(audio_file.name)
            
            if audio_file.state.name == "FAILED":
                return {"quality": "failed", "readable": False}
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            analysis_prompt = """
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞—á–µ—Å—Ç–≤–æ —ç—Ç–æ–≥–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏.
            
            –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            –ö–∞—á–µ—Å—Ç–≤–æ: [–æ—Ç–ª–∏—á–Ω–æ–µ/—Ö–æ—Ä–æ—à–µ–µ/—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ/–ø–ª–æ—Ö–æ–µ]
            –†–∞–∑–±–æ—Ä—á–∏–≤–æ—Å—Ç—å: [–¥–∞/—á–∞—Å—Ç–∏—á–Ω–æ/–Ω–µ—Ç]
            –Ø–∑—ã–∫: [—Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π/–¥—Ä—É–≥–æ–π]
            –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: [–∫–æ—Ä–æ—Ç–∫–æ–µ/—Å—Ä–µ–¥–Ω–µ–µ/–¥–ª–∏–Ω–Ω–æ–µ]
            –ü—Ä–æ–±–ª–µ–º—ã: [–ø–µ—Ä–µ—á–∏—Å–ª–∏ –µ—Å–ª–∏ –µ—Å—Ç—å]
            """
            
            response = self.model.generate_content([analysis_prompt, audio_file])
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            os.unlink(temp_path)
            genai.delete_file(audio_file.name)
            
            analysis_text = response.text.strip()
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            quality_info = {
                "quality": "unknown",
                "readable": True,
                "language": "russian",
                "analysis": analysis_text
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞
            if "–ø–ª–æ—Ö–æ–µ" in analysis_text.lower():
                quality_info["quality"] = "poor"
                quality_info["readable"] = False
            elif "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ" in analysis_text.lower():
                quality_info["quality"] = "fair"
            elif "—Ö–æ—Ä–æ—à–µ–µ" in analysis_text.lower():
                quality_info["quality"] = "good"
            elif "–æ—Ç–ª–∏—á–Ω–æ–µ" in analysis_text.lower():
                quality_info["quality"] = "excellent"
                
            return quality_info
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∞—É–¥–∏–æ: {e}")
            return {"quality": "unknown", "readable": True, "language": "russian"}

    async def process_audio_with_context(self, audio_data: bytes, context: str) -> tuple[str, str]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∞—É–¥–∏–æ –Ω–∞–ø—Ä—è–º—É—é —Å –ø–æ–º–æ—â—å—é Gemini 2.5 Pro —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        –ë–ï–ó –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
        
        Args:
            audio_data: –ë–∞–π—Ç—ã –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            
        Returns:
            tuple: (–ø–æ–ª–Ω—ã–π_–æ—Ç–≤–µ—Ç, –∫—Ä–∞—Ç–∫–∏–π_–æ—Ç–≤–µ—Ç)
        """
        temp_path = None
        audio_file = None
        
        try:
            import tempfile
            import os
            
            logger.info(f"üéß –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ, —Ä–∞–∑–º–µ—Ä: {len(audio_data)} –±–∞–π—Ç")
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
            with tempfile.NamedTemporaryFile(suffix=".oga", delete=False) as temp_file:
                temp_file.write(audio_data)
                temp_path = temp_file.name
            
            logger.info(f"üìÅ –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {temp_path}")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –≤ Gemini —Å —É–∫–∞–∑–∞–Ω–∏–µ–º MIME-—Ç–∏–ø–∞
            try:
                logger.info("‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ Gemini API...")
                audio_file = genai.upload_file(
                    path=temp_path,
                    mime_type="audio/ogg"  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π MIME-—Ç–∏–ø
                )
                logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Gemini: {audio_file.name}")
            except Exception as upload_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å MIME audio/ogg: {upload_error}")
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è MIME-—Ç–∏–ø–∞...")
                try:
                    audio_file = genai.upload_file(path=temp_path)
                    logger.info(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –±–µ–∑ MIME-—Ç–∏–ø–∞: {audio_file.name}")
                except Exception as second_upload_error:
                    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {second_upload_error}")
                    raise second_upload_error
            
            # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            import time
            max_wait_time = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
            waited_time = 0
            
            logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ –≤ Gemini...")
            while audio_file.state.name == "PROCESSING" and waited_time < max_wait_time:
                time.sleep(2)
                waited_time += 2
                audio_file = genai.get_file(audio_file.name)
                logger.debug(f"‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {waited_time}s, —Å—Ç–∞—Ç—É—Å: {audio_file.state.name}")
            
            if audio_file.state.name == "FAILED":
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ Gemini: {audio_file.state}")
                error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
                return error_msg, error_msg
            
            if audio_file.state.name == "PROCESSING":
                logger.error(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –≤ Gemini –ø–æ—Å–ª–µ {max_wait_time}s")
                error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
                return error_msg, error_msg
            
            logger.info(f"‚úÖ –ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω Gemini: {audio_file.state.name}")
            
            # –≠—Ç–∞–ø 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é —Å –∞—É–¥–∏–æ
            audio_prompt = f"""{Config.MAIN_PROMPT}

{context}

–í–ê–ñ–ù–û: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. 
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –Ω–µ —Ç–æ–ª—å–∫–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ, –Ω–æ –∏ —Ç–æ–Ω, —ç–º–æ—Ü–∏–∏, –∏–Ω—Ç–æ–Ω–∞—Ü–∏–∏.
–£—á–∏—Ç—ã–≤–∞–π –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞.
–ï—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å —Å–≤—è–∑–∞–Ω —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞ —ç—Ç–æ —Å—Å—ã–ª–∞–π—Å—è.

–°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–π –∞—É–¥–∏–æ, –∑–∞—Ç–µ–º –¥–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

            logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini...")
            try:
                response1 = self.model.generate_content([audio_prompt, audio_file])
                logger.info("‚úÖ –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø (—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç) –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as generation_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {generation_error}")
                raise generation_error
            
            if not response1.text:
                logger.error("‚ùå Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç—å –≥—Ä–æ–º—á–µ –∏ —á–µ—Ç—á–µ."
                return error_msg, error_msg
            
            full_answer = response1.text
            logger.info(f"üìù –ü–æ–ª—É—á–µ–Ω –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç, –¥–ª–∏–Ω–∞: {len(full_answer)} —Å–∏–º–≤–æ–ª–æ–≤")

            # –≠—Ç–∞–ø 2: –°–æ–∫—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç
            try:
                logger.info("‚úÇÔ∏è –°–æ–∫—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç...")
                summary_prompt = f"{Config.SUMMARY_PROMPT}\n\n–¢–µ–∫—Å—Ç –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: {full_answer}"
                response2 = self.model.generate_content(summary_prompt)
                short_answer = response2.text if response2.text else full_answer
                logger.info("‚úÖ –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø (—Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ) –∑–∞–≤–µ—Ä—à–µ–Ω")
            except Exception as summary_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: {summary_error}")
                # –ï—Å–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                short_answer = full_answer
            
            logger.info(f"üéâ –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            return full_answer, short_answer

        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ: {type(e).__name__}: {e}")
            import traceback
            logger.error(f"üìã Traceback: {traceback.format_exc()}")
            
            error_msg = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ –∑–∞–Ω–æ–≤–æ."
            return error_msg, error_msg
            
        finally:
            # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
            try:
                if temp_path and os.path.exists(temp_path):
                    os.unlink(temp_path)
                    logger.debug("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as cleanup_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {cleanup_error}")
            
            try:
                if audio_file:
                    genai.delete_file(audio_file.name)
                    logger.debug("üóëÔ∏è –§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ Gemini")
            except Exception as cleanup_error:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–∑ Gemini: {cleanup_error}")

    async def extract_transcription_from_response(self, response_text: str) -> str:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        
        Args:
            response_text: –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini
            
        Returns:
            str: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∏–ª–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
        """
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞
            lines = response_text.split('\n')
            
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–≥–ª—è–¥—è—Ç –∫–∞–∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
            possible_transcription = []
            
            for line in lines[:10]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫
                line = line.strip()
                if line and not line.startswith('*') and not line.startswith('#'):
                    # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –ø—Ä—è–º–∞—è —Ä–µ—á—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
                    if ('?' in line or 
                        line.lower().startswith(('–∫–∞–∫', '—á—Ç–æ', '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–¥–∞–π')) or
                        len(line.split()) > 3):  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
                        possible_transcription.append(line)
                        
                        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É, –±–µ—Ä–µ–º –µ—ë
                        if len(line) > 20:
                            break
            
            if possible_transcription:
                return possible_transcription[0]
            else:
                # Fallback: –±–µ—Ä–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
            return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" 