"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è Telegram –±–æ—Ç–∞.
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes
from keyboards.inline import InlineKeyboards
from keyboards.reply import ReplyKeyboards
from utils.context import ContextManager
from utils.messages import MessageUtils
from services.gemini import GeminiService
from config import Config

logger = logging.getLogger(__name__)

class ButtonHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫"""
    
    def __init__(self, context_manager: ContextManager, gemini_service: GeminiService = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫
        
        Args:
            context_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            gemini_service: –°–µ—Ä–≤–∏—Å Gemini –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ
        """
        self.context_manager = context_manager
        self.gemini_service = gemini_service
        self.inline_keyboards = InlineKeyboards()
        self.reply_keyboards = ReplyKeyboards()
        self.message_utils = MessageUtils()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫")
    
    async def handle_inline_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        data = query.data
        
        logger.info(f"Inline –∫–Ω–æ–ø–∫–∞ '{data}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
        
        if data.startswith("full_"):
            await self._handle_full_answer(query, user_id, data)
        elif data.startswith("short_"):
            await self._handle_short_answer(query, user_id, data)
        elif data.startswith("summary_new_"):
            await self._handle_summary_new_chat(query, user_id, data)
        elif data.startswith("summary_"):
            await self._handle_dialog_summary(query, user_id, data)
        elif data.startswith("new_chat_"):
            await self._handle_new_chat(query, user_id, data)
        elif data.startswith("continue_chat_"):
            await self._handle_continue_chat(query, user_id, data)
        elif data.startswith("context_"):
            await self._handle_context_settings(query, data)
        elif data == "back_main":
            await self._handle_back_main(query)
    
    async def _handle_full_answer(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        parts = data.split("_")
        if len(parts) >= 3:
            answer_user_id = int(parts[1])
            answer_id = int(parts[2])
            
            if answer_user_id == user_id:
                answer_data = self.context_manager.get_full_answer(user_id, answer_id)
                if answer_data:
                    full_text = answer_data['full_answer']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–µ—â–∞–µ—Ç—Å—è –ª–∏ –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if len(full_text) <= Config.MESSAGE_LENGTH_LIMIT:
                        # –ö–û–†–û–¢–ö–û–ï –°–û–û–ë–©–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        reply_markup = self.inline_keyboards.get_full_answer_keyboard(user_id, answer_id)
                        
                        await self.message_utils.safe_edit_message(
                            query, full_text, 'Markdown', reply_markup
                        )
                    else:
                        # –î–õ–ò–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï: –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
                        # 1. –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–µ–∑ –∫–Ω–æ–ø–æ–∫)
                        short_text = answer_data['short_answer']
                        limit_info = self.context_manager.get_limit_info_text(user_id)
                        final_short_text = short_text
                        if limit_info:
                            final_short_text += f"\n\n{limit_info}"
                        
                        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –∫—Ä–∞—Ç–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        await self.message_utils.safe_edit_message(
                            query, final_short_text, 'Markdown', None
                        )
                        
                        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —á–∞—Å—Ç—è–º–∏ –ø–æ–¥ –∫—Ä–∞—Ç–∫–∏–º
                        reply_markup = self.inline_keyboards.get_answer_keyboard(user_id, answer_id)
                        
                        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                        parts = self.message_utils.smart_split_message(full_text)
                        
                        for i, part in enumerate(parts):
                            try:
                                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                                if len(parts) > 1:
                                    part_indicator = f"\n\nüìÑ –ß–∞—Å—Ç—å {i+1}/{len(parts)}"
                                    if len(part + part_indicator) <= Config.MESSAGE_LENGTH_LIMIT:
                                        part += part_indicator
                                
                                # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                                current_reply_markup = reply_markup if i == len(parts) - 1 else None
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ query.message —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Markdown
                                try:
                                    await query.message.reply_text(
                                        part, 
                                        parse_mode='Markdown', 
                                        reply_markup=current_reply_markup
                                    )
                                except Exception as markdown_error:
                                    if "can't parse entities" in str(markdown_error).lower():
                                        # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                                        logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ —á–∞—Å—Ç–∏ {i+1}, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏: {markdown_error}")
                                        await query.message.reply_text(
                                            part, 
                                            reply_markup=current_reply_markup
                                        )
                                    else:
                                        raise markdown_error
                                
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}/{len(parts)}: {e}")
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                                await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                else:
                    await self.message_utils.safe_edit_message(query, "‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    async def _handle_short_answer(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫—Ä–∞—Ç–∫–æ–º—É –æ—Ç–≤–µ—Ç—É"""
        parts = data.split("_")
        if len(parts) >= 3:
            answer_user_id = int(parts[1])
            answer_id = int(parts[2])
            
            if answer_user_id == user_id:
                answer_data = self.context_manager.get_full_answer(user_id, answer_id)
                if answer_data:
                    limit_info = self.context_manager.get_limit_info_text(user_id)
                    short_text = answer_data['short_answer']
                    if limit_info:
                        short_text += f"\n\n{limit_info}"
                    
                    reply_markup = self.inline_keyboards.get_answer_keyboard(user_id, answer_id)
                    
                    await self.message_utils.safe_edit_message(
                        query, short_text, 'Markdown', reply_markup
                    )
    
    async def _handle_dialog_summary(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ –¥–∏–∞–ª–æ–≥–∞"""
        user_id_from_data = int(data.split("_")[1])
        if user_id_from_data == user_id:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            await self.message_utils.safe_edit_message(
                query, "ü¶â –£—Ö—É..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            context_string = self.context_manager.get_context_string(user_id)
            
            if not context_string.strip():
                await self.message_utils.safe_edit_message(
                    query, "‚ùå –ù–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ."
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ —á–µ—Ä–µ–∑ Gemini
            if self.gemini_service:
                summary = await self.gemini_service.generate_dialog_summary(context_string)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–æ–ª–µ–∑–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏
                reply_markup = self.inline_keyboards.get_summary_keyboard(user_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏
                if len(summary) > Config.MESSAGE_LENGTH_LIMIT:
                    # –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ —É–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —á–∞—Å—Ç–∏
                    await query.delete()  # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    
                    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ query.message
                    parts = self.message_utils.smart_split_message(summary)
                    
                    for i, part in enumerate(parts):
                        try:
                            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                            if len(parts) > 1:
                                part_indicator = f"\n\nüìÑ –ß–∞—Å—Ç—å {i+1}/{len(parts)}"
                                if len(part + part_indicator) <= Config.MESSAGE_LENGTH_LIMIT:
                                    part += part_indicator
                            
                            # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                            current_reply_markup = reply_markup if i == len(parts) - 1 else None
                            
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ query.message —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ Markdown
                            try:
                                await query.message.reply_text(
                                    part, 
                                    parse_mode='Markdown', 
                                    reply_markup=current_reply_markup
                                )
                            except Exception as markdown_error:
                                if "can't parse entities" in str(markdown_error).lower():
                                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ —á–∞—Å—Ç–∏ —Ä–µ–∑—é–º–µ {i+1}, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏")
                                    await query.message.reply_text(
                                        part, 
                                        reply_markup=current_reply_markup
                                    )
                                else:
                                    raise markdown_error
                        
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Ä–µ–∑—é–º–µ {i+1}/{len(parts)}: {e}")
                            await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                else:
                    await self.message_utils.safe_edit_message(
                        query, summary, 'Markdown', reply_markup
                    )
            else:
                await self.message_utils.safe_edit_message(
                    query, "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                )
    
    async def _handle_new_chat(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞"""
        user_id_from_data = int(data.split("_")[2])
        if user_id_from_data == user_id:
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.context_manager.clear_context(user_id)
            
            await self.message_utils.safe_edit_message(
                query, "üÜï **–ù–æ–≤—ã–π —á–∞—Ç –Ω–∞—á–∞—Ç!**\n\n–ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã."
            )
    
    async def _handle_summary_new_chat(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—é–º–µ + –Ω–æ–≤—ã–π —á–∞—Ç"""
        user_id_from_data = int(data.split("_")[2])
        if user_id_from_data == user_id:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            await self.message_utils.safe_edit_message(
                query, "üìãüÜï –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ä–µ–∑—é–º–µ –∏ –≥–æ—Ç–æ–≤–ª—é –Ω–æ–≤—ã–π —á–∞—Ç..."
            )
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_string = self.context_manager.get_context_string(user_id)
            
            if not context_string.strip():
                # –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø—Ä–æ—Å—Ç–æ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
                self.context_manager.clear_context(user_id)
                await self.message_utils.safe_edit_message(
                    query, "üÜï **–ù–æ–≤—ã–π —á–∞—Ç –Ω–∞—á–∞—Ç!**\n\n–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–∏–∞–ª–æ–≥ –±—ã–ª –ø—É—Å—Ç."
                )
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
            if self.gemini_service:
                summary = await self.gemini_service.generate_dialog_summary(context_string)
                
                # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å —Ä–µ–∑—é–º–µ
                self.context_manager.start_new_chat_with_summary(user_id, summary)
                
                result_text = (
                    f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞\n\n"
                    f"–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 10 —Å–æ–æ–±—â–µ–Ω–∏–π. –Ø —Å–æ–∑–¥–∞–ª —Ä–µ–∑—é–º–µ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ "
                    f"–∏ –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π —á–∞—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç!\n\n"
                    f"–†–µ–∑—é–º–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:\n\n"
                    f"{summary}\n\n"
                    f"---\n\n"
                    f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –æ–±—â–µ–Ω–∏–µ. –Ø –ø–æ–º–Ω—é –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞!"
                )
                
                await self.message_utils.safe_edit_message(
                    query, result_text, 'Markdown'
                )
            else:
                await self.message_utils.safe_edit_message(
                    query, "‚ùå –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∑—é–º–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
                )
    
    async def _handle_continue_chat(self, query, user_id: int, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —á–∞—Ç–∞"""
        user_id_from_data = int(data.split("_")[2])
        if user_id_from_data == user_id:
            # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
            await self.message_utils.safe_edit_message(
                query, "‚úÖ **–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —á–∞—Ç!**\n\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å 3 —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ."
            )
    
    async def _handle_context_settings(self, query, data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        new_limit = int(data.split("_")[1])
        self.context_manager.update_context_limit(new_limit)
        
        await self.message_utils.safe_edit_message(
            query,
            f"‚úÖ –õ–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_limit} —Å–æ–æ–±—â–µ–Ω–∏–π!",
            None,
            self.inline_keyboards.get_settings_keyboard()
        )
    
    async def _handle_back_main(self, query):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        await self.message_utils.safe_edit_message(
            query,
            "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            None,
            self.inline_keyboards.get_main_inline_keyboard()
        )
    
    async def handle_keyboard_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                   message_handler, command_handler) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        text = update.message.text
        user_id = update.effective_user.id
        
        logger.info(f"Keyboard –∫–Ω–æ–ø–∫–∞ '{text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
        
        if text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å":
            await update.message.reply_text(
                "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:",
                reply_markup=self.reply_keyboards.get_main_keyboard()
            )
        elif text == "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å":
            await update.message.reply_text(
                "üéôÔ∏è –ó–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º:",
                reply_markup=self.reply_keyboards.get_main_keyboard()
            )
        elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
            await self._handle_statistics(update, user_id)
        elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
            await self._handle_settings(update)
        elif text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å":
            await self._handle_clear_memory(update, user_id)
        elif text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞":
            await command_handler.help_command(update, context)
        else:
            # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
            await message_handler.handle_text_message(update, context)
    
    async def _handle_statistics(self, update: Update, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user_messages = self.context_manager.get_user_message_count(user_id)
        remaining = self.context_manager.get_remaining_messages(user_id)
        
        stats_text = f"–°–æ–æ–±—â–µ–Ω–∏–π: {user_messages}/10, –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}"
        await update.message.reply_text(
            stats_text,
            reply_markup=self.reply_keyboards.get_main_keyboard()
        )
    
    async def _handle_settings(self, update: Update):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        await update.message.reply_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:",
            parse_mode='Markdown',
            reply_markup=self.inline_keyboards.get_settings_keyboard()
        )
    
    async def _handle_clear_memory(self, update: Update, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏"""
        self.context_manager.clear_context(user_id)
        await update.message.reply_text(
            "üßπ –ü–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞!",
            reply_markup=self.reply_keyboards.get_main_keyboard()
        ) 