"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram –±–æ—Ç–∞.
"""

import logging
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from keyboards.inline import InlineKeyboards
from utils.context import ContextManager
from utils.messages import MessageUtils
from services.gemini import GeminiService
from services.speech import SpeechService
from config import Config

logger = logging.getLogger(__name__)

class MessageHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, context_manager: ContextManager, gemini_service: GeminiService, 
                 speech_service: SpeechService):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            context_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            gemini_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini
            speech_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏
        """
        self.context_manager = context_manager
        self.gemini_service = gemini_service
        self.speech_service = speech_service
        self.inline_keyboards = InlineKeyboards()
        self.message_utils = MessageUtils()
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        text = update.message.text
        
        if not text or text.strip() == "":
            await update.message.reply_text("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å.")
            return
        
        logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, –¥–ª–∏–Ω–∞: {len(text)}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        thinking_message = await update.message.reply_text("ü¶â –£—Ö—É...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_string = self.context_manager.get_context_string(user_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Gemini
            full_answer, short_answer = await self.gemini_service.process_with_context(text, context_string)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç (—ç—Ç–æ —É–≤–µ–ª–∏—á–∏—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
            self.context_manager.add_to_context(user_id, "user", text)
            self.context_manager.add_to_context(user_id, "assistant", full_answer)
            
            # –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
            answer_id = self.context_manager.get_next_answer_id(user_id)
            self.context_manager.save_full_answer(user_id, answer_id, full_answer, short_answer, text)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            limit_info = self.context_manager.get_limit_info_text(user_id)
            response_text = short_answer
            if limit_info:  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                response_text += f"\n\n{limit_info}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = self.inline_keyboards.get_answer_keyboard(user_id, answer_id)
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await thinking_message.delete()
            
            await self.message_utils.safe_send_message(
                update, response_text, 'Markdown', reply_markup
            )
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
            await self._check_and_handle_limits(update, user_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await thinking_message.delete()
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    async def _check_and_handle_limits(self, update: Update, user_id: int):
        """–ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ (10-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        if self.context_manager.should_auto_create_summary(user_id):
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ 10 —Å–æ–æ–±—â–µ–Ω–∏–π - —Å–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑—é–º–µ")
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ
            context_string = self.context_manager.get_context_string(user_id)
            summary = await self.gemini_service.generate_dialog_summary(context_string)
            
            # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç —Å —Ä–µ–∑—é–º–µ
            self.context_manager.start_new_chat_with_summary(user_id, summary)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            notification_text = (
                "üîÑ **–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞**\n\n"
                "–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –≤ 10 —Å–æ–æ–±—â–µ–Ω–∏–π. –Ø —Å–æ–∑–¥–∞–ª —Ä–µ–∑—é–º–µ –Ω–∞—à–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞ "
                "–∏ –Ω–∞—á–∞–ª –Ω–æ–≤—ã–π —á–∞—Ç, —Å–æ—Ö—Ä–∞–Ω–∏–≤ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç!\n\n"
                "–†–µ–∑—é–º–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞:\n\n"
                f"{summary}\n\n"
                "‚ú® –¢–µ–ø–µ—Ä—å —É –≤–∞—Å —Å–Ω–æ–≤–∞ 10 –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!"
            )
            
            await self.message_utils.safe_send_message(
                update, notification_text, 'Markdown'
            )
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (7-–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        elif self.context_manager.should_show_limit_warning(user_id):
            remaining = self.context_manager.get_remaining_messages(user_id)
            logger.info(f"–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å: {remaining}")
            
            warning_text = (
                "‚ö†Ô∏è **–ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π**\n\n"
                f"–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å **{remaining} —Å–æ–æ–±—â–µ–Ω–∏—è** –¥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ.\n\n"
                "ü§î **–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?**"
            )
            
            reply_markup = self.inline_keyboards.get_limit_warning_keyboard(user_id)
            
            await self.message_utils.safe_send_message(
                update, warning_text, 'Markdown', reply_markup
            )
    
    async def handle_voice_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏"""
        user_id = update.effective_user.id
        
        logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        thinking_message = await update.message.reply_text("ü¶â –£—Ö—É...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
            voice = update.message.voice
            file = await context.bot.get_file(voice.file_id)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
            audio_data = await file.download_as_bytearray()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            file_size_mb = len(audio_data) / (1024 * 1024)
            logger.info(f"–†–∞–∑–º–µ—Ä –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {file_size_mb:.2f} MB, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration}s")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context_string = self.context_manager.get_context_string(user_id)
            
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –≤—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if Config.should_use_direct_audio_mode():
                # ====== –†–ï–ñ–ò–ú –ü–†–Ø–ú–û–ô –û–ë–†–ê–ë–û–¢–ö–ò –ê–£–î–ò–û ======
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ {Config.GEMINI_MODEL}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if (file_size_mb > Config.GEMINI_MAX_AUDIO_SIZE_MB or 
                    voice.duration > Config.GEMINI_MAX_AUDIO_DURATION):
                    logger.warning(f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã –¥–ª—è –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
                    # Fallback –∫ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
                    await self._process_with_transcription(
                        update, thinking_message, audio_data, voice, context_string, user_id
                    )
                else:
                    # –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
                    await thinking_message.edit_text("ü¶â –£—Ö—É... –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∞—É–¥–∏–æ...")
                    
                    try:
                        full_answer, short_answer = await self.gemini_service.process_audio_with_context(
                            bytes(audio_data), context_string
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
                        if not full_answer or full_answer.strip() == "" or "–æ—à–∏–±–∫–∞" in full_answer.lower():
                            logger.warning("–ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –¥–∞–ª–∞ –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
                            await self._process_with_transcription(
                                update, thinking_message, audio_data, voice, context_string, user_id
                            )
                            return
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                        transcription = await self.gemini_service.extract_transcription_from_response(full_answer)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        self.context_manager.add_to_context(user_id, "user", transcription)
                        self.context_manager.add_to_context(user_id, "assistant", full_answer)
                        
                        # –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
                        answer_id = self.context_manager.get_next_answer_id(user_id)
                        self.context_manager.save_full_answer(user_id, answer_id, full_answer, short_answer, transcription)
                        
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
                        limit_info = self.context_manager.get_limit_info_text(user_id)
                        response_parts = [short_answer]
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                        if limit_info:
                            response_parts.extend(["", limit_info])
                        
                        response_text = "\n".join(response_parts)
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                        reply_markup = self.inline_keyboards.get_answer_keyboard(user_id, answer_id)
                        await thinking_message.delete()
                        
                        await self.message_utils.safe_send_message(
                            update, response_text, 'Markdown', reply_markup
                        )
                        
                        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                        await self._check_and_handle_limits(update, user_id)
                        
                    except Exception as direct_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {direct_error}")
                        logger.info("–ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∫–∞–∫ fallback")
                        await self._process_with_transcription(
                            update, thinking_message, audio_data, voice, context_string, user_id
                        )
            
            else:
                # ====== –†–ï–ñ–ò–ú –¢–†–ê–ù–°–ö–†–ò–ü–¶–ò–ò ======
                reason = []
                if Config.AUDIO_PROCESSING_MODE != 'direct':
                    reason.append(f"AUDIO_PROCESSING_MODE={Config.AUDIO_PROCESSING_MODE}")
                if not Config.supports_direct_audio_processing():
                    reason.append(f"–º–æ–¥–µ–ª—å {Config.GEMINI_MODEL} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø—Ä—è–º—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—É–¥–∏–æ")
                
                reason_str = ", ".join(reason) if reason else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞"
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏. –ü—Ä–∏—á–∏–Ω—ã: {reason_str}")
                await self._process_with_transcription(
                    update, thinking_message, audio_data, voice, context_string, user_id
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await thinking_message.delete()
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    async def _process_with_transcription(self, update, thinking_message, audio_data, voice, context_string, user_id):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é (—Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º)"""
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        try:
            await thinking_message.edit_text("ü¶â –£—Ö—É... —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É—é...")
        except Exception as edit_error:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {edit_error}")
        
        text = None
        transcription_method = "unknown"
        
        # –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        use_gemini = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if Config.TRANSCRIPTION_MODE == "speech_api_only":
            use_gemini = False
            logger.info("–†–µ–∂–∏–º speech_api_only - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Google Speech API")
        elif Config.TRANSCRIPTION_MODE == "gemini_only":
            use_gemini = True
            logger.info("–†–µ–∂–∏–º gemini_only - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Gemini")
        else:  # auto —Ä–µ–∂–∏–º
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è Gemini
            file_size_mb = len(audio_data) / (1024 * 1024)
            if (file_size_mb > Config.GEMINI_MAX_AUDIO_SIZE_MB or 
                voice.duration > Config.GEMINI_MAX_AUDIO_DURATION):
                use_gemini = False
                logger.info(f"–§–∞–π–ª –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã Gemini (—Ä–∞–∑–º–µ—Ä: {file_size_mb:.2f}MB, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {voice.duration}s) - –∏—Å–ø–æ–ª—å–∑—É–µ–º Speech API")
        
        if not use_gemini:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º Google Speech API
            try:
                await thinking_message.edit_text("ü¶â –£—Ö—É... –∏—Å–ø–æ–ª—å–∑—É—é Google Speech...")
            except Exception as edit_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {edit_error}")
            text = await self.speech_service.transcribe_audio_simple(bytes(audio_data))
            transcription_method = "Google Speech API"
        else:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º Gemini (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
            try:
                try:
                    await thinking_message.edit_text("ü¶â –£—Ö—É... –∏—Å–ø–æ–ª—å–∑—É—é Gemini...")
                except Exception as edit_error:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {edit_error}")
                text = await self.gemini_service.transcribe_audio(bytes(audio_data))
                transcription_method = "Gemini"
                
                if not text and Config.TRANSCRIPTION_MODE != "gemini_only":
                    logger.warning("Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Speech API")
                    try:
                        await thinking_message.edit_text("ü¶â –£—Ö—É... –ø–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ Speech API...")
                    except Exception as edit_error:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {edit_error}")
                    text = await self.speech_service.transcribe_audio_simple(bytes(audio_data))
                    transcription_method = "Google Speech API (fallback)"
                    
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –≤ Gemini —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {e}")
                if Config.TRANSCRIPTION_MODE != "gemini_only":
                    try:
                        await thinking_message.edit_text("ü¶â –£—Ö—É... –ø—Ä–æ–±—É—é Speech API...")
                    except Exception as edit_error:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {edit_error}")
                    text = await self.speech_service.transcribe_audio_simple(bytes(audio_data))
                    transcription_method = "Google Speech API (error fallback)"
                else:
                    text = None
        
        if not text:
            try:
                await thinking_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞.")
            except Exception as edit_error:
                logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {edit_error}")
                await thinking_message.delete()
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞.")
            return
        
        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({transcription_method}): {text}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        try:
            await thinking_message.edit_text("ü¶â –£—Ö—É... –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
        except Exception as edit_error:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {edit_error}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
        full_answer, short_answer = await self.gemini_service.process_with_context(text, context_string)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.context_manager.add_to_context(user_id, "user", text)
        self.context_manager.add_to_context(user_id, "assistant", full_answer)
        
        # –°–æ–∑–¥–∞–µ–º ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç
        answer_id = self.context_manager.get_next_answer_id(user_id)
        self.context_manager.save_full_answer(user_id, answer_id, full_answer, short_answer, text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        limit_info = self.context_manager.get_limit_info_text(user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
        response_parts = [short_answer]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if limit_info:
            response_parts.extend(["", limit_info])
        
        response_text = "\n".join(response_parts)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        reply_markup = self.inline_keyboards.get_answer_keyboard(user_id, answer_id)
        await thinking_message.delete()
        
        await self.message_utils.safe_send_message(
            update, response_text, 'Markdown', reply_markup
        )
        
        # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ü–û–°–õ–ï –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
        await self._check_and_handle_limits(update, user_id) 