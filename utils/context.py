"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

from typing import Dict
from collections import defaultdict
from models.user import UserData
from config import Config
import logging

logger = logging.getLogger(__name__)

class ContextManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.users: Dict[int, UserData] = {}
        self.max_context_length = Config.MAX_CONTEXT_MESSAGES
    
    def get_user(self, user_id: int) -> UserData:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.users:
            self.users[user_id] = UserData(
                user_id=user_id,
                max_context_length=self.max_context_length
            )
        return self.users[user_id]
    
    def add_to_context(self, user_id: int, role: str, content: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        user.add_to_context(role, content)
    
    def get_context_string(self, user_id: int) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        user = self.get_user(user_id)
        return user.get_context_string()
    
    def clear_context(self, user_id: int):
        """–û—á–∏—â–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.users:
            self.users[user_id].clear_context()
    
    def save_full_answer(self, user_id: int, answer_id: int, full_answer: str, 
                        short_answer: str, question: str, message_id: int = None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        user.save_full_answer(answer_id, full_answer, short_answer, question, message_id)
    
    def get_full_answer(self, user_id: int, answer_id: int):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        return user.get_full_answer(answer_id)
    
    def get_context_count(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞)"""
        user = self.get_user(user_id)
        return user.get_context_count()
    
    def get_user_message_count(self, user_id: int) -> int:
        """–ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        return user.get_user_message_count()
    
    def get_remaining_messages(self, user_id: int) -> int:
        """–ù–û–í–û–ï: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = self.get_user(user_id)
        return user.get_remaining_messages()
    
    def should_show_limit_warning(self, user_id: int) -> bool:
        """–ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ"""
        user = self.get_user(user_id)
        return user.should_show_limit_warning()
    
    def should_auto_create_summary(self, user_id: int) -> bool:
        """–ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ"""
        user = self.get_user(user_id)
        return user.should_auto_create_summary()
    
    def get_next_answer_id(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π ID –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(user_id)
        return user.get_next_answer_id()
    
    def update_context_limit(self, new_limit: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        self.max_context_length = new_limit
        for user in self.users.values():
            user.max_context_length = new_limit 
    
    def start_new_chat_with_summary(self, user_id: int, summary: str):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —á–∞—Ç —Å —Ä–µ–∑—é–º–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        user = self.get_user(user_id)
        user.start_new_chat_with_summary(summary)
        logger.info(f"–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —á–∞—Ç —Å —Ä–µ–∑—é–º–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    def get_limit_info_text(self, user_id: int) -> str:
        """–ù–û–í–û–ï: –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ª–∏–º–∏—Ç–∞—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_count = self.get_user_message_count(user_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞—è —Å 8-–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if user_count >= 8:
            remaining = self.get_remaining_messages(user_id)
            return f"üìä –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: {user_count}/10 | –û—Å—Ç–∞–ª–æ—Å—å: {remaining}"
        else:
            return ""  # –î–æ 8-–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö 