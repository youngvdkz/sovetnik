"""
–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.
"""

import logging
import re
from typing import Optional, List
from telegram import Update
from telegram.ext import ContextTypes
from config import Config

logger = logging.getLogger(__name__)

class MessageSplitter:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–º–Ω–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, max_length: int = Config.MESSAGE_LENGTH_LIMIT):
        self.max_length = max_length
    
    def split(self, text: str) -> List[str]:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º Markdown –∏ –∞–±–∑–∞—Ü–µ–≤
        
        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if len(text) <= self.max_length:
            return [text]
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∞–±–∑–∞—Ü–∞–º (–¥–≤–æ–π–Ω–æ–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)
        paragraphs = text.split('\n\n')
        parts = []
        current_message = ""
        
        for paragraph in paragraphs:
            test_message = current_message + ('\n\n' if current_message else '') + paragraph
            
            if len(test_message) <= self.max_length and self._is_safe_split_point(test_message):
                # –ê–±–∑–∞—Ü –ø–æ–º–µ—â–∞–µ—Ç—Å—è - –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                current_message = test_message
            else:
                # –ê–±–∑–∞—Ü –Ω–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if current_message.strip():
                    parts.append(current_message.strip())
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–±–∑–∞—Ü
                if len(paragraph) <= self.max_length and self._is_safe_split_point(paragraph):
                    current_message = paragraph
                else:
                    # –ê–±–∑–∞—Ü –Ω—É–∂–Ω–æ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
                    paragraph_parts = self._split_paragraph(paragraph)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –∞–±–∑–∞—Ü–∞, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
                    for part in paragraph_parts[:-1]:
                        if part.strip():
                            parts.append(part.strip())
                    
                    # –ü–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                    current_message = paragraph_parts[-1] if paragraph_parts else ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if current_message.strip():
            parts.append(current_message.strip())
        
        return self._finalize_parts(parts)
    
    def _count_markdown_tags(self, text: str) -> dict:
        """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ/–∑–∞–∫—Ä—ã—Ç—ã–µ Markdown —Ç–µ–≥–∏"""
        counts = {
            '**': text.count('**') % 2,  # bold
            '*': (text.count('*') - text.count('**') * 2) % 2,  # italic  
            '`': text.count('`') % 2,  # code
            '_': text.count('_') % 2,  # underline
        }
        return counts
    
    def _is_safe_split_point(self, text: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ª–∏ —Ä–∞–∑–±–∏–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —ç—Ç–æ–π —Ç–æ—á–∫–µ (–≤—Å–µ —Ç–µ–≥–∏ –∑–∞–∫—Ä—ã—Ç—ã)"""
        counts = self._count_markdown_tags(text)
        all_tags_closed = all(count == 0 for count in counts.values())
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —Ç–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ —Å–ª–æ–≤–∞
        if text and not text[-1].isspace() and text[-1] not in '.!?,:;':
            if len(text) > 1 and text[-2:].isalnum():
                return False
        
        return all_tags_closed
    
    def _split_paragraph(self, paragraph: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –∞–±–∑–∞—Ü –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"""
        if len(paragraph) <= self.max_length:
            return [paragraph]
        
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º
        sentences = re.split(r'([.!?]+\s)', paragraph)
        
        for sentence in sentences:
            test_part = current_part + sentence
            
            if len(test_part) <= self.max_length and self._is_safe_split_point(test_part):
                current_part = test_part
            else:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —á–∞—Å—Ç—å
                if current_part.strip():
                    parts.append(current_part.strip())
                
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                if len(sentence) > self.max_length:
                    word_parts = self._split_by_words(sentence)
                    parts.extend(word_parts[:-1])
                    current_part = word_parts[-1] if word_parts else ""
                else:
                    current_part = sentence
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
        if current_part.strip():
            parts.append(current_part.strip())
        
        return parts
    
    def _split_by_words(self, text: str) -> List[str]:
        """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —Å–ª–æ–≤–∞–º –∫–æ–≥–¥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ"""
        parts = []
        words = text.split(' ')
        current_part = ""
        
        for word in words:
            test_part = current_part + (' ' if current_part else '') + word
            
            if len(test_part) <= self.max_length and self._is_safe_split_point(test_part):
                current_part = test_part
            else:
                if current_part.strip():
                    parts.append(current_part.strip())
                current_part = word
        
        if current_part.strip():
            parts.append(current_part.strip())
        
        return parts
    
    def _finalize_parts(self, parts: List[str]) -> List[str]:
        """–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —á–∞—Å—Ç–µ–π"""
        final_parts = []
        
        for part in parts:
            if part.strip():
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Markdown
                if not self._is_safe_split_point(part):
                    logger.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å Markdown –≤ —á–∞—Å—Ç–∏ –¥–ª–∏–Ω–æ–π {len(part)}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
                    safe_parts = self._safe_fallback_split(part)
                    final_parts.extend(safe_parts)
                else:
                    final_parts.append(part.strip())
        
        return final_parts if final_parts else [text[:self.max_length]]
    
    def _safe_fallback_split(self, text: str) -> List[str]:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Markdown –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        parts = []
        current_part = ""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –±–µ–∑ —É—á–µ—Ç–∞ Markdown
        sentences = re.split(r'([.!?]+\s+)', text)
        
        for sentence in sentences:
            test_part = current_part + sentence
            
            if len(test_part) <= self.max_length:
                current_part = test_part
            else:
                if current_part.strip():
                    parts.append(current_part.strip())
                
                # –ï—Å–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                if len(sentence) > self.max_length:
                    words = sentence.split(' ')
                    word_part = ""
                    
                    for word in words:
                        test_word_part = word_part + (' ' if word_part else '') + word
                        
                        if len(test_word_part) <= self.max_length:
                            word_part = test_word_part
                        else:
                            if word_part.strip():
                                parts.append(word_part.strip())
                            word_part = word
                    
                    current_part = word_part
                else:
                    current_part = sentence
        
        if current_part.strip():
            parts.append(current_part.strip())
        
        return parts if parts else [text[:self.max_length]]


class MessageUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    @staticmethod
    def smart_split_message(text: str, max_length: int = Config.MESSAGE_LENGTH_LIMIT) -> List[str]:
        """
        –£–º–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º Markdown –∏ –∞–±–∑–∞—Ü–µ–≤
        """
        splitter = MessageSplitter(max_length)
        return splitter.split(text)

    @staticmethod
    async def send_long_message(update: Update, text: str, parse_mode: str = None, reply_markup=None):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∑–±–∏–≤–∫–æ–π –Ω–∞ —á–∞—Å—Ç–∏
        """
        parts = MessageUtils.smart_split_message(text)
        
        sent_messages = []
        for i, part in enumerate(parts):
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–∞—Å—Ç–∏ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(parts) > 1:
                    part_indicator = f"\n\nüìÑ –ß–∞—Å—Ç—å {i+1}/{len(parts)}"
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–º–µ—â–∞–µ—Ç—Å—è
                    if len(part + part_indicator) <= Config.MESSAGE_LENGTH_LIMIT:
                        part += part_indicator
                
                # –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
                current_reply_markup = reply_markup if i == len(parts) - 1 else None
                
                # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å Markdown
                try:
                    message = await MessageUtils.safe_send_message_with_return(
                        update, part, parse_mode, current_reply_markup
                    )
                    sent_messages.append(message)
                except Exception as markdown_error:
                    if "can't parse entities" in str(markdown_error).lower():
                        logger.warning(f"–û—à–∏–±–∫–∞ Markdown –≤ —á–∞—Å—Ç–∏ {i+1}, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏")
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
                        message = await MessageUtils.safe_send_message_with_return(
                            update, part, None, current_reply_markup
                        )
                        sent_messages.append(message)
                    else:
                        raise markdown_error
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}/{len(parts)}: {e}")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                await MessageUtils.safe_send_message(
                    update, f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
        
        return sent_messages

    @staticmethod
    async def safe_send_message(update: Update, text: str, parse_mode: str = None, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ç–∫–∏"""
        try:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–±–∏–≤–∫—É
            if len(text) > Config.MESSAGE_LENGTH_LIMIT:
                return await MessageUtils.send_long_message(update, text, parse_mode, reply_markup)
            
            await update.message.reply_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
        except Exception as e:
            if "can't parse entities" in str(e).lower():
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏: {e}")
                await update.message.reply_text(text, reply_markup=reply_markup)
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    @staticmethod
    async def safe_send_message_with_return(update: Update, text: str, parse_mode: str = None, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –æ–±—ä–µ–∫—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            return await update.message.reply_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
        except Exception as e:
            if "can't parse entities" in str(e).lower():
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown, –æ—Ç–ø—Ä–∞–≤–ª—è—é –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏: {e}")
                return await update.message.reply_text(text, reply_markup=reply_markup)
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                return await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    @staticmethod
    async def safe_edit_message(query, text: str, parse_mode: str = None, reply_markup=None):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ç–∫–∏"""
        try:
            # –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ –∂–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É (–Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π)
            if len(text) > Config.MESSAGE_LENGTH_LIMIT:
                text = text[:Config.MESSAGE_CUT_LENGTH] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
            
            await query.edit_message_text(text, parse_mode=parse_mode, reply_markup=reply_markup)
        except Exception as e:
            error_msg = str(e).lower()
            if "can't parse entities" in error_msg:
                # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ - —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏, —É–±–∏—Ä–∞—é —Ä–∞–∑–º–µ—Ç–∫—É: {e}")
                try:
                    if len(text) > Config.MESSAGE_LENGTH_LIMIT:
                        text = text[:Config.MESSAGE_CUT_LENGTH] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
                    await query.edit_message_text(text, reply_markup=reply_markup)
                except Exception as e2:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e2}")
                    await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è")
            elif "message is too long" in error_msg or "message_too_long" in error_msg:
                # –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
                short_text = text[:Config.MESSAGE_CUT_LENGTH] + "\n\n... (—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)\nüí° –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"
                try:
                    await query.edit_message_text(short_text, parse_mode=parse_mode, reply_markup=reply_markup)
                except Exception as e3:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e3}")
                    await query.edit_message_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            else:
                # –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    @staticmethod
    def safe_fallback_split(text: str, max_len: int) -> List[str]:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Markdown –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
        """
        splitter = MessageSplitter(max_len)
        return splitter._safe_fallback_split(text) 