"""
Flask wrapper –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –Ω–∞ Render.com
"""

import threading
import time
from flask import Flask, jsonify
from main import main as run_bot
import logging
import os
import asyncio
import aiohttp

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Flask(__name__)

# –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
bot_status = {
    'running': False,
    'start_time': None,
    'last_activity': None
}

@app.route('/')
def health_check():
    """Health check endpoint –¥–ª—è Render"""
    return jsonify({
        'status': 'ok',
        'bot_running': bot_status['running'],
        'uptime_seconds': time.time() - bot_status['start_time'] if bot_status['start_time'] else 0,
        'service': 'telegram-bot-adviser'
    })

@app.route('/status')
def status():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return jsonify(bot_status)

@app.route('/wake')
def wake_up():
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return "‚è∞ Bot is awake!"

def run_flask():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    port = int(os.environ.get('PORT', 10000))
    logger.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
    app.run(host='0.0.0.0', port=port, debug=False)

async def keep_alive():
    """Keep-alive –º–µ—Ö–∞–Ω–∏–∑–º - –ø–∏–Ω–≥—É–µ—Ç —Å–∞–º–æ —Å–µ–±—è –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
    app_url = os.environ.get('RENDER_EXTERNAL_URL', 'http://localhost:10000')
    
    while True:
        try:
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
            
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{app_url}/wake") as response:
                    if response.status == 200:
                        logger.info("‚è∞ Keep-alive ping successful")
                    else:
                        logger.warning(f"‚ö†Ô∏è Keep-alive ping failed: {response.status}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Keep-alive error: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∏–Ω–≥–∞

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –∑–∞–ø—É—Å–∫ Flask –≤ –ø–æ—Ç–æ–∫–µ, Telegram bot –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(target=run_flask, daemon=True)
        flask_thread.start()
        
        logger.info("üåê Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ")
        time.sleep(2)  # –î–∞–µ–º Flask –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        bot_status['running'] = True
        bot_status['start_time'] = time.time()
        bot_status['last_activity'] = time.time()
        
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        run_bot()
        
    except KeyboardInterrupt:
        logger.info("‚õî –°–µ—Ä–≤–∏—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        bot_status['running'] = False
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        bot_status['running'] = False
        raise

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å keep-alive –º–µ—Ö–∞–Ω–∏–∑–º–æ–º...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ —Å keep-alive
    async def run_bot_with_keepalive():
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep-alive –≤ —Ñ–æ–Ω–µ
        keep_alive_task = asyncio.create_task(keep_alive())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram –±–æ—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ...")
        await run_bot()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    asyncio.run(run_bot_with_keepalive()) 