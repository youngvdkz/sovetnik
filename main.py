"""
Telegram –±–æ—Ç-—Å–æ–≤–µ—Ç–Ω–∏–∫ —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π.
"""

import logging
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from config import Config
from utils.context import ContextManager
from services.gemini import GeminiService
from services.speech import SpeechService
from handlers.commands import CommandHandlers
from handlers.messages import MessageHandlers
from handlers.buttons import ButtonHandlers

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format=Config.LOG_FORMAT, level=Config.LOG_LEVEL)
logger = logging.getLogger(__name__)

class AdvisorBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        Config.validate()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.context_manager = ContextManager()
        self.gemini_service = GeminiService()
        self.speech_service = SpeechService()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.command_handlers = CommandHandlers(self.context_manager)
        self.message_handlers = MessageHandlers(
            self.context_manager, 
            self.gemini_service, 
            self.speech_service
        )
        self.button_handlers = ButtonHandlers(self.context_manager, self.gemini_service)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.application = Application.builder().token(Config.TELEGRAM_BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self._setup_handlers()
        
        logger.info("‚úÖ –ë–æ—Ç-—Å–æ–≤–µ—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        logger.info("‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...")
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.command_handlers.start))
        self.application.add_handler(CommandHandler("clear", self.command_handlers.clear_command))
        self.application.add_handler(CommandHandler("help", self.command_handlers.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_handlers.handle_inline_button))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.VOICE, self.message_handlers.handle_voice_message))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
        self.application.add_handler(MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self._handle_text_with_buttons
        ))
        
        logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã!")
    
    async def _handle_text_with_buttons(self, update, context):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–Ω–æ–ø–æ–∫"""
        text = update.message.text
        
        # –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard_buttons = [
            "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å", "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"
        ]
        
        if text in keyboard_buttons:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∫–Ω–æ–ø–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await self.button_handlers.handle_keyboard_button(
                update, context, self.message_handlers, self.command_handlers
            )
        else:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.message_handlers.handle_text_message(update, context)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üî• –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞-—Å–æ–≤–µ—Ç–Ω–∏–∫–∞...")
        logger.info(f"üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
        logger.info(f"   ü§ñ –ï–¥–∏–Ω–∞—è –º–æ–¥–µ–ª—å Gemini: {Config.GEMINI_MODEL}")
        logger.info(f"   üéß –†–µ–∂–∏–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {Config.AUDIO_PROCESSING_MODE}")
        logger.info(f"   üìù –†–µ–∂–∏–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏: {Config.TRANSCRIPTION_MODE}")
        logger.info(f"   üí¨ –õ–∏–º–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {Config.MAX_CONTEXT_MESSAGES} —Å–æ–æ–±—â–µ–Ω–∏–π")
        logger.info(f"   üìÑ –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {Config.MESSAGE_LENGTH_LIMIT} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   üéØ –ü—Ä—è–º–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ: {'–î–ê' if Config.should_use_direct_audio_mode() else '–ù–ï–¢'}")
        
        try:
            self.application.run_polling(allowed_updates=['message', 'callback_query'])
        except KeyboardInterrupt:
            logger.info("‚õî –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = AdvisorBot()
        bot.run()
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        exit(1)

if __name__ == "__main__":
    main() 